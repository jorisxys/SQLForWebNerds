file system
  already integrated
  
transaction processing
  but, can't support several users simultaneously.  = no concurrency control -> atomair, consistent, isolation, durable
  atomair: all changes go through or none do.
  consistent: changes have to go from consisten to consistent states. Consistent state based on integrity rules made when creating db.
  isolation: the results of the transaction are invisible to other transactions untill it's complete/done. You can't see intermediate state.
  durable: once committed it's permanent and safe from accidents/future system failures.
 
finding your data and fast: indexing
  fundaments of db: insert, update, delete
  eg: search the db for account number xxxx = raw data crunching = bad !
  
Enter the Relational Database! (big spreadsheet multiple people can use at once)
  each table is a spreadsheet
  biggest innovation was the declarative language sql (squeel, sequal) 
  
  ----create table mailing_list (
            email           varchar(100) not null primary key,
            name            varchar(100)
       );
  
  you have both ddl and dml 
  ----insert into mailing_list (name, email)
      values ('Philip Greenspun','philg@mit.edu');
     
  ----alter table mailing_list add (phone_number varchar(20));
  ----select * from mailing_list;
  
  
  drop table mailing_list;

        create table mailing_list (
                email           varchar(100) not null primary key,
                name            varchar(100)
        );

        create table phone_numbers (
                email           varchar(100) not null references mailing_list(email),
                number_type     varchar(15) check (number_type in ('work','home','cell','beeper')),
                phone_number    varchar(20) not null
        );
        
       
 
